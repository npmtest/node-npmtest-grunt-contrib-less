{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-less/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_less */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-less/lib.npmtest_grunt_contrib_less.js":"/* istanbul instrument in package npmtest_grunt_contrib_less */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_less = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_less = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-less/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-less && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_less */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_less\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_less.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_less.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_less.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_less.__dirname + '/lib.npmtest_grunt_contrib_less.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-less/node_modules/grunt-contrib-less/tasks/less.js":"/*\r\n * grunt-contrib-less\r\n * http://gruntjs.com/\r\n *\r\n * Copyright (c) 2016 Tyler Kellen, contributors\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nvar path = require('path');\r\nvar _ = require('lodash');\r\nvar async = require('async');\r\nvar chalk = require('chalk');\r\nvar less = require('less');\r\n\r\nmodule.exports = function(grunt) {\r\n  grunt.registerMultiTask('less', 'Compile LESS files to CSS', function() {\r\n    var done = this.async();\r\n\r\n    var options = this.options({\r\n      banner: ''\r\n    });\r\n\r\n    if (this.files.length < 1) {\r\n      grunt.verbose.warn('Destination not written because no source files were provided.');\r\n    }\r\n\r\n    var tally = {\r\n      sheets: 0,\r\n      maps: 0\r\n    };\r\n\r\n    async.eachSeries(this.files, function(f, nextFileObj) {\r\n      var destFile = f.dest;\r\n\r\n      var files = f.src.filter(function(filepath) {\r\n        // Warn on and remove invalid source files (if nonull was set).\r\n        if (!grunt.file.exists(filepath)) {\r\n          grunt.log.warn('Source file \"' + filepath + '\" not found.');\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n\r\n      if (files.length === 0) {\r\n        if (f.src.length < 1) {\r\n          grunt.log.warn('Destination ' + chalk.cyan(destFile) + ' not written because no source files were found.');\r\n        }\r\n\r\n        // No src files, goto next target. Warn would have been issued above.\r\n        return nextFileObj();\r\n      }\r\n\r\n      var compiled = [];\r\n      var i = 0;\r\n\r\n      async.concatSeries(files, function(file, next) {\r\n        if (i++ > 0) {\r\n          options.banner = '';\r\n        }\r\n\r\n        compileLess(file, destFile, options)\r\n          .then(function(output) {\r\n            compiled.push(output.css);\r\n            if (options.sourceMap && !options.sourceMapFileInline) {\r\n              var sourceMapFilename = options.sourceMapFilename;\r\n              if (!sourceMapFilename) {\r\n                sourceMapFilename = destFile + '.map';\r\n              }\r\n              grunt.file.write(sourceMapFilename, output.map);\r\n              grunt.verbose.writeln('File ' + chalk.cyan(sourceMapFilename) + ' created.');\r\n              tally.maps++;\r\n            }\r\n            process.nextTick(next);\r\n          },\r\n          function(err) {\r\n            nextFileObj(err);\r\n          });\r\n      }, function() {\r\n        if (compiled.length < 1) {\r\n          grunt.log.warn('Destination ' + chalk.cyan(destFile) + ' not written because compiled files were empty.');\r\n        } else {\r\n          var allCss = compiled.join(options.compress ? '' : grunt.util.normalizelf(grunt.util.linefeed));\r\n          grunt.file.write(destFile, allCss);\r\n          grunt.verbose.writeln('File ' + chalk.cyan(destFile) + ' created');\r\n          tally.sheets++;\r\n        }\r\n        nextFileObj();\r\n      });\r\n\r\n    }, function () {\r\n      if (tally.sheets) {\r\n        grunt.log.ok(tally.sheets + ' ' + grunt.util.pluralize(tally.sheets, 'stylesheet/stylesheets') + ' created.');\r\n      }\r\n\r\n      if (tally.maps) {\r\n        grunt.log.ok(tally.maps + ' ' + grunt.util.pluralize(tally.maps, 'sourcemap/sourcemaps') + ' created.');\r\n      }\r\n\r\n      done();\r\n    });\r\n  });\r\n\r\n  var compileLess = function(srcFile, destFile, options) {\r\n    options = _.assign({filename: srcFile}, options);\r\n    options.paths = options.paths || [path.dirname(srcFile)];\r\n\r\n    if (typeof options.paths === 'function') {\r\n      try {\r\n        options.paths = options.paths(srcFile);\r\n      } catch (e) {\r\n        grunt.fail.warn(wrapError(e, 'Generating @import paths failed.'));\r\n      }\r\n    }\r\n\r\n    if (options.sourceMap && !options.sourceMapFileInline && !options.sourceMapFilename) {\r\n      options.sourceMapFilename = path.basename(destFile) + '.map';\r\n    }\r\n\r\n    if (typeof options.sourceMapBasepath === 'function') {\r\n      try {\r\n        options.sourceMapBasepath = options.sourceMapBasepath(srcFile);\r\n      } catch (e) {\r\n        grunt.fail.warn(wrapError(e, 'Generating sourceMapBasepath failed.'));\r\n      }\r\n    }\r\n\r\n    if (typeof options.sourceMap === 'boolean' && options.sourceMap) {\r\n      options.sourceMap = {\r\n        sourceMapBasepath: options.sourceMapBasepath,\r\n        sourceMapFilename: options.sourceMapFilename,\r\n        sourceMapInputFilename: options.sourceMapInputFilename,\r\n        sourceMapFullFilename: options.sourceMapFullFilename,\r\n        sourceMapURL: options.sourceMapURL,\r\n        sourceMapRootpath: options.sourceMapRootpath,\r\n        outputSourceFiles: options.outputSourceFiles,\r\n        sourceMapFileInline: options.sourceMapFileInline\r\n      };\r\n    }\r\n\r\n    var srcCode = grunt.file.read(srcFile);\r\n\r\n    // Equivalent to --modify-vars option.\r\n    // Properties under options.modifyVars are appended as less variables\r\n    // to override global variables.\r\n    var modifyVarsOutput = parseVariableOptions(options.modifyVars);\r\n    if (modifyVarsOutput) {\r\n      srcCode += '\\n' + modifyVarsOutput;\r\n    }\r\n\r\n    // Load custom functions\r\n    if (options.customFunctions) {\r\n      Object.keys(options.customFunctions).forEach(function(name) {\r\n        less.functions.functionRegistry.add(name.toLowerCase(), function() {\r\n          var args = [].slice.call(arguments);\r\n          args.unshift(less);\r\n          var res = options.customFunctions[name].apply(this, args);\r\n          return typeof res === 'object' ? res : new less.tree.Anonymous(res);\r\n        });\r\n      });\r\n    }\r\n\r\n    return less.render(srcCode, options)\r\n      .catch(function(err) {\r\n        lessError(err, srcFile);\r\n        throw err;\r\n      });\r\n  };\r\n\r\n  var parseVariableOptions = function(options) {\r\n    var pairs = _.toPairs(options);\r\n    var output = '';\r\n    pairs.forEach(function(pair) {\r\n      output += '@' + pair[0] + ':' + pair[1] + ';';\r\n    });\r\n    return output;\r\n  };\r\n\r\n  var formatLessError = function(e) {\r\n    var pos = '[' + 'L' + e.line + ':' + ('C' + e.column) + ']';\r\n    return e.filename + ': ' + pos + ' ' + e.message;\r\n  };\r\n\r\n  var lessError = function(e, file) {\r\n    var message = less.formatError ? less.formatError(e) : formatLessError(e);\r\n\r\n    grunt.log.error(message);\r\n    grunt.fail.warn('Error compiling ' + file);\r\n  };\r\n\r\n  var wrapError = function (e, message) {\r\n    var err = new Error(message);\r\n    err.origError = e;\r\n    return err;\r\n  };\r\n};\r\n"}